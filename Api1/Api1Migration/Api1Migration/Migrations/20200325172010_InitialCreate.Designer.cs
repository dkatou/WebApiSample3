// <auto-generated />
using System;
using Api1.Api1Model.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Api1Migration.Migrations
{
    [DbContext(typeof(Api1Context))]
    [Migration("20200325172010_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Api1.Api1Model.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("V_BLOG_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AsStamp")
                        .HasColumnName("AS_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TsStamp")
                        .HasColumnName("TS_STAMP")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnName("N_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsStamp")
                        .HasColumnName("US_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId");

                    b.ToTable("T_BLOG");
                });

            modelBuilder.Entity("Api1.Api1Model.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("V_COMPANY_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AsStamp")
                        .HasColumnName("AS_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnName("N_COMPANY_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TsStamp")
                        .HasColumnName("TS_STAMP")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsStamp")
                        .HasColumnName("US_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("T_COMPANY");
                });

            modelBuilder.Entity("Api1.Api1Model.Models.CompanyChild", b =>
                {
                    b.Property<int>("CompanyParentId")
                        .HasColumnName("V_COMPANY_PARENT_ID")
                        .HasColumnType("int");

                    b.Property<int>("CompanyChildId")
                        .HasColumnName("V_COMPANY_CHILD_ID")
                        .HasColumnType("int");

                    b.Property<string>("AsStamp")
                        .HasColumnName("AS_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TsStamp")
                        .HasColumnName("TS_STAMP")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsStamp")
                        .HasColumnName("US_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyParentId", "CompanyChildId");

                    b.HasIndex("CompanyId");

                    b.ToTable("T_COMPANY_CHILD");
                });

            modelBuilder.Entity("Api1.Api1Model.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("V_NOTE_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AsStamp")
                        .HasColumnName("AS_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlogId")
                        .HasColumnName("V_BLOG_ID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnName("N_CONTENT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TsStamp")
                        .HasColumnName("TS_STAMP")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsStamp")
                        .HasColumnName("US_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NoteId");

                    b.HasIndex("BlogId");

                    b.ToTable("T_NOTE");
                });

            modelBuilder.Entity("Api1.Api1Model.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("V_POST_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AsStamp")
                        .HasColumnName("AS_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlogId")
                        .HasColumnName("V_BLOG_ID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnName("N_CONTENT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnName("N_TITLE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TsStamp")
                        .HasColumnName("TS_STAMP")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsStamp")
                        .HasColumnName("US_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.HasIndex("BlogId");

                    b.ToTable("T_POST");
                });

            modelBuilder.Entity("Api1.Api1Model.Models.PostChild", b =>
                {
                    b.Property<int>("PostChildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("V_POST_CHILD_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AsStamp")
                        .HasColumnName("AS_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostChildName")
                        .HasColumnName("N_POST_CHILD_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnName("V_POST_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TsStamp")
                        .HasColumnName("TS_STAMP")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsStamp")
                        .HasColumnName("US_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostChildId");

                    b.HasIndex("PostId");

                    b.ToTable("T_POST_CHILD");
                });

            modelBuilder.Entity("Api1.Api1Model.Models.Viewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("V_VIEWER_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AsStamp")
                        .HasColumnName("AS_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlogId")
                        .HasColumnName("V_BLOG_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("N_VIEWER_NAME")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("PersonId")
                        .HasColumnName("V_PERSON_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TsStamp")
                        .HasColumnName("TS_STAMP")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsStamp")
                        .HasColumnName("US_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ViewDateTime")
                        .HasColumnName("D_VIWE_DATETIME")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("T_VIEWER");
                });

            modelBuilder.Entity("Api1.Api1Model.Models.CompanyChild", b =>
                {
                    b.HasOne("Api1.Api1Model.Models.Company", null)
                        .WithMany("CompanyChildChilds")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Api1.Api1Model.Models.Company", "CompanyP")
                        .WithMany("CompanyParentChilds")
                        .HasForeignKey("CompanyParentId")
                        .HasConstraintName("FK01_T_COMPANY_CHILD_T_COMPANY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api1.Api1Model.Models.Note", b =>
                {
                    b.HasOne("Api1.Api1Model.Models.Blog", "Blog")
                        .WithMany("Notes")
                        .HasForeignKey("BlogId")
                        .HasConstraintName("FK01_T_NOTE_T_BLOG")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api1.Api1Model.Models.Post", b =>
                {
                    b.HasOne("Api1.Api1Model.Models.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .HasConstraintName("FK01_T_POST_T_BLOG")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api1.Api1Model.Models.PostChild", b =>
                {
                    b.HasOne("Api1.Api1Model.Models.Post", "Post")
                        .WithMany("PostChilds")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK01_T_POST_CHILD_T_POST")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api1.Api1Model.Models.Viewer", b =>
                {
                    b.HasOne("Api1.Api1Model.Models.Blog", "Blog")
                        .WithMany("Viewers")
                        .HasForeignKey("BlogId")
                        .HasConstraintName("FK01_T_VIEWER_T_BLOG")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
